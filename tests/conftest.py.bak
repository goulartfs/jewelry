"""
Configuração dos testes.

Este módulo define as fixtures e configurações para os testes.
"""
import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from src.joias.infrastructure.persistence.sqlalchemy.base import Base
from src.joias.infrastructure.persistence.sqlalchemy.session import get_session
from src.main import app


@pytest.fixture
def engine():
    """
    Cria um engine SQLAlchemy em memória para os testes.
    
    Returns:
        Engine do SQLAlchemy
    """
    engine = create_engine(
        "sqlite:///:memory:",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    Base.metadata.create_all(bind=engine)
    return engine


@pytest.fixture
def session_factory(engine):
    """
    Cria uma fábrica de sessões SQLAlchemy para os testes.
    
    Args:
        engine: Engine do SQLAlchemy
        
    Returns:
        Fábrica de sessões do SQLAlchemy
    """
    return sessionmaker(autocommit=False, autoflush=False, bind=engine)


@pytest.fixture
def session(session_factory):
    """
    Cria uma sessão SQLAlchemy para os testes.
    
    Args:
        session_factory: Fábrica de sessões do SQLAlchemy
        
    Returns:
        Sessão do SQLAlchemy
    """
    session = session_factory()
    try:
        yield session
    finally:
        session.close()


@pytest.fixture
def client(session):
    """
    Cria um cliente de teste para a API.
    
    Args:
        session: Sessão do SQLAlchemy
        
    Returns:
        Cliente de teste
    """
    def override_get_session():
        try:
            yield session
        finally:
            session.close()

    app.dependency_overrides[get_session] = override_get_session
    client = TestClient(app)
    yield client
    app.dependency_overrides.clear()
